# ! [allow (clippy)] # ! [allow (unused)] # ! [allow (dead_code)] # ! [allow (non_camel_case_types)] # ! [allow (non_snake_case)] # [derive (Debug , Clone , PartialEq)] pub struct Attribute { pub children : Vec < std :: sync :: Arc < AttributeName_AttributeValue_QuotedAttributeValue >> , _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for Attribute { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl Attribute { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 37u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Attribute { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { let mut cursor = node . walk () ; let children = node . named_children (& mut cursor) . filter (| n | AttributeName_AttributeValue_QuotedAttributeValue :: contains (n)) . map (| node | { let result = std :: sync :: Arc :: new (AttributeName_AttributeValue_QuotedAttributeValue :: try_from ((& node , & mut * index)) ?) ; index . push (result . clone () as _) ; Ok (result) }) . collect :: < Result < Vec < _ > , Self :: Error >> () ? ; ; Ok (Self { children , _range : node . range () , }) } } # [derive (Debug , Clone , PartialEq)] pub struct Doctype { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for Doctype { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl Doctype { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 26u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Doctype { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub struct Document { pub children : Vec < std :: sync :: Arc < Doctype_Element_Entity_ErroneousEndTag_ScriptElement_StyleElement_Text >> , _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for Document { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl Document { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 25u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Document { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { let mut cursor = node . walk () ; let children = node . named_children (& mut cursor) . filter (| n | Doctype_Element_Entity_ErroneousEndTag_ScriptElement_StyleElement_Text :: contains (n)) . map (| node | { let result = std :: sync :: Arc :: new (Doctype_Element_Entity_ErroneousEndTag_ScriptElement_StyleElement_Text :: try_from ((& node , & mut * index)) ?) ; index . push (result . clone () as _) ; Ok (result) }) . collect :: < Result < Vec < _ > , Self :: Error >> () ? ; ; Ok (Self { children , _range : node . range () , }) } } # [derive (Debug , Clone , PartialEq)] pub struct Element { pub children : Vec < std :: sync :: Arc < Doctype_Element_EndTag_Entity_ErroneousEndTag_ScriptElement_SelfClosingTag_StartTag_StyleElement_Text >> , _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for Element { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl Element { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 28u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Element { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { let mut cursor = node . walk () ; let children = node . named_children (& mut cursor) . filter (| n | Doctype_Element_EndTag_Entity_ErroneousEndTag_ScriptElement_SelfClosingTag_StartTag_StyleElement_Text :: contains (n)) . map (| node | { let result = std :: sync :: Arc :: new (Doctype_Element_EndTag_Entity_ErroneousEndTag_ScriptElement_SelfClosingTag_StartTag_StyleElement_Text :: try_from ((& node , & mut * index)) ?) ; index . push (result . clone () as _) ; Ok (result) }) . collect :: < Result < Vec < _ > , Self :: Error >> () ? ; ; Ok (Self { children , _range : node . range () , }) } } # [derive (Debug , Clone , PartialEq)] pub struct EndTag { pub children : std :: sync :: Arc < TagName > , _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for EndTag { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl EndTag { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 35u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for EndTag { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { let mut cursor = node . walk () ; let children = node . named_children (& mut cursor) . filter (| n | TagName :: contains (n)) . next () . ok_or_else (|| auto_lsp :: core :: errors :: AstError :: UnexpectedSymbol { range : node . range () , symbol : node . kind () , parent_name : stringify ! (TagName) , }) ? ; let children = std :: sync :: Arc :: new (TagName :: try_from ((& children , & mut * index)) ?) ; index . push (children . clone () as _) ; ; Ok (Self { children , _range : node . range () , }) } } # [derive (Debug , Clone , PartialEq)] pub struct ErroneousEndTag { pub children : std :: sync :: Arc < ErroneousEndTagName > , _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for ErroneousEndTag { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl ErroneousEndTag { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 36u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for ErroneousEndTag { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { let mut cursor = node . walk () ; let children = node . named_children (& mut cursor) . filter (| n | ErroneousEndTagName :: contains (n)) . next () . ok_or_else (|| auto_lsp :: core :: errors :: AstError :: UnexpectedSymbol { range : node . range () , symbol : node . kind () , parent_name : stringify ! (ErroneousEndTagName) , }) ? ; let children = std :: sync :: Arc :: new (ErroneousEndTagName :: try_from ((& children , & mut * index)) ?) ; index . push (children . clone () as _) ; ; Ok (Self { children , _range : node . range () , }) } } # [derive (Debug , Clone , PartialEq)] pub struct QuotedAttributeValue { pub children : Option < std :: sync :: Arc < AttributeValue >> , _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for QuotedAttributeValue { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl QuotedAttributeValue { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 38u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for QuotedAttributeValue { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { let mut cursor = node . walk () ; let children = node . named_children (& mut cursor) . filter (| n | AttributeValue :: contains (n)) . next () . map (| node | { let result = std :: sync :: Arc :: new (AttributeValue :: try_from ((& node , & mut * index)) ?) ; index . push (result . clone () as _) ; Ok (result) }) . transpose () ? ; ; Ok (Self { children , _range : node . range () , }) } } # [derive (Debug , Clone , PartialEq)] pub struct ScriptElement { pub children : Vec < std :: sync :: Arc < EndTag_RawText_StartTag >> , _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for ScriptElement { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl ScriptElement { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 29u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for ScriptElement { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { let mut cursor = node . walk () ; let children = node . named_children (& mut cursor) . filter (| n | EndTag_RawText_StartTag :: contains (n)) . map (| node | { let result = std :: sync :: Arc :: new (EndTag_RawText_StartTag :: try_from ((& node , & mut * index)) ?) ; index . push (result . clone () as _) ; Ok (result) }) . collect :: < Result < Vec < _ > , Self :: Error >> () ? ; ; Ok (Self { children , _range : node . range () , }) } } # [derive (Debug , Clone , PartialEq)] pub struct SelfClosingTag { pub children : Vec < std :: sync :: Arc < Attribute_TagName >> , _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for SelfClosingTag { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl SelfClosingTag { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 34u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for SelfClosingTag { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { let mut cursor = node . walk () ; let children = node . named_children (& mut cursor) . filter (| n | Attribute_TagName :: contains (n)) . map (| node | { let result = std :: sync :: Arc :: new (Attribute_TagName :: try_from ((& node , & mut * index)) ?) ; index . push (result . clone () as _) ; Ok (result) }) . collect :: < Result < Vec < _ > , Self :: Error >> () ? ; ; Ok (Self { children , _range : node . range () , }) } } # [derive (Debug , Clone , PartialEq)] pub struct StartTag { pub children : Vec < std :: sync :: Arc < Attribute_TagName >> , _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for StartTag { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl StartTag { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 31u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for StartTag { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { let mut cursor = node . walk () ; let children = node . named_children (& mut cursor) . filter (| n | Attribute_TagName :: contains (n)) . map (| node | { let result = std :: sync :: Arc :: new (Attribute_TagName :: try_from ((& node , & mut * index)) ?) ; index . push (result . clone () as _) ; Ok (result) }) . collect :: < Result < Vec < _ > , Self :: Error >> () ? ; ; Ok (Self { children , _range : node . range () , }) } } # [derive (Debug , Clone , PartialEq)] pub struct StyleElement { pub children : Vec < std :: sync :: Arc < EndTag_RawText_StartTag >> , _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for StyleElement { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl StyleElement { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 30u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for StyleElement { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { let mut cursor = node . walk () ; let children = node . named_children (& mut cursor) . filter (| n | EndTag_RawText_StartTag :: contains (n)) . map (| node | { let result = std :: sync :: Arc :: new (EndTag_RawText_StartTag :: try_from ((& node , & mut * index)) ?) ; index . push (result . clone () as _) ; Ok (result) }) . collect :: < Result < Vec < _ > , Self :: Error >> () ? ; ; Ok (Self { children , _range : node . range () , }) } } # [derive (Debug , Clone , PartialEq)] pub struct Token_DoubleQuote { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for Token_DoubleQuote { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl Token_DoubleQuote { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind () , "\"") } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Token_DoubleQuote { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub struct Token_Quote { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for Token_Quote { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl Token_Quote { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind () , "'") } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Token_Quote { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub struct Token_SlashGreater { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for Token_SlashGreater { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl Token_SlashGreater { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind () , "/>") } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Token_SlashGreater { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub struct Token_Less { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for Token_Less { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl Token_Less { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind () , "<") } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Token_Less { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub struct Token_LessBang { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for Token_LessBang { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl Token_LessBang { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind () , "<!") } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Token_LessBang { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub struct Token_LessSlash { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for Token_LessSlash { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl Token_LessSlash { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind () , "</") } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Token_LessSlash { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub struct Token_Equal { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for Token_Equal { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl Token_Equal { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind () , "=") } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Token_Equal { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub struct Token_Greater { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for Token_Greater { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl Token_Greater { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind () , ">") } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Token_Greater { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub struct AttributeName { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for AttributeName { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl AttributeName { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 9u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for AttributeName { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub struct AttributeValue { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for AttributeValue { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl AttributeValue { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 10u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for AttributeValue { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub struct Comment { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for Comment { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl Comment { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 24u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Comment { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub struct Token_Doctype { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for Token_Doctype { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl Token_Doctype { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 26u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Token_Doctype { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub struct Entity { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for Entity { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl Entity { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 11u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Entity { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub struct ErroneousEndTagName { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for ErroneousEndTagName { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl ErroneousEndTagName { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 21u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for ErroneousEndTagName { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub struct RawText { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for RawText { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl RawText { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 23u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for RawText { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub struct TagName { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for TagName { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl TagName { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 17u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for TagName { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub struct Text { _range : auto_lsp :: tree_sitter :: Range } impl auto_lsp :: core :: ast :: AstNode for Text { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { & self . _range } } impl Text { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 16u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Text { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { Ok (Self { _range : node . range () }) } } # [derive (Debug , Clone , PartialEq)] pub enum EndTag_RawText_StartTag { EndTag (EndTag) , RawText (RawText) , StartTag (StartTag) } impl auto_lsp :: core :: ast :: AstNode for EndTag_RawText_StartTag { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { match self { Self :: EndTag (node) => node . get_range () , Self :: RawText (node) => node . get_range () , Self :: StartTag (node) => node . get_range () } } } impl EndTag_RawText_StartTag { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 35u16 | 23u16 | 31u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for EndTag_RawText_StartTag { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { match node . kind_id () { 35u16 => Ok (Self :: EndTag (EndTag :: try_from ((node , & mut * index)) ?)) , 23u16 => Ok (Self :: RawText (RawText :: try_from ((node , & mut * index)) ?)) , 31u16 => Ok (Self :: StartTag (StartTag :: try_from ((node , & mut * index)) ?)) , _ => Err (auto_lsp :: core :: errors :: AstError :: UnexpectedSymbol { range : node . range () , symbol : node . kind () , parent_name : stringify ! (EndTag_RawText_StartTag) , }) } } } # [derive (Debug , Clone , PartialEq)] pub enum AttributeName_AttributeValue_QuotedAttributeValue { AttributeName (AttributeName) , AttributeValue (AttributeValue) , QuotedAttributeValue (QuotedAttributeValue) } impl auto_lsp :: core :: ast :: AstNode for AttributeName_AttributeValue_QuotedAttributeValue { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { match self { Self :: AttributeName (node) => node . get_range () , Self :: AttributeValue (node) => node . get_range () , Self :: QuotedAttributeValue (node) => node . get_range () } } } impl AttributeName_AttributeValue_QuotedAttributeValue { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 9u16 | 10u16 | 38u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for AttributeName_AttributeValue_QuotedAttributeValue { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { match node . kind_id () { 9u16 => Ok (Self :: AttributeName (AttributeName :: try_from ((node , & mut * index)) ?)) , 10u16 => Ok (Self :: AttributeValue (AttributeValue :: try_from ((node , & mut * index)) ?)) , 38u16 => Ok (Self :: QuotedAttributeValue (QuotedAttributeValue :: try_from ((node , & mut * index)) ?)) , _ => Err (auto_lsp :: core :: errors :: AstError :: UnexpectedSymbol { range : node . range () , symbol : node . kind () , parent_name : stringify ! (AttributeName_AttributeValue_QuotedAttributeValue) , }) } } } # [derive (Debug , Clone , PartialEq)] pub enum Doctype_Element_EndTag_Entity_ErroneousEndTag_ScriptElement_SelfClosingTag_StartTag_StyleElement_Text { Doctype (Doctype) , Element (Element) , EndTag (EndTag) , Entity (Entity) , ErroneousEndTag (ErroneousEndTag) , ScriptElement (ScriptElement) , SelfClosingTag (SelfClosingTag) , StartTag (StartTag) , StyleElement (StyleElement) , Text (Text) } impl auto_lsp :: core :: ast :: AstNode for Doctype_Element_EndTag_Entity_ErroneousEndTag_ScriptElement_SelfClosingTag_StartTag_StyleElement_Text { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { match self { Self :: Doctype (node) => node . get_range () , Self :: Element (node) => node . get_range () , Self :: EndTag (node) => node . get_range () , Self :: Entity (node) => node . get_range () , Self :: ErroneousEndTag (node) => node . get_range () , Self :: ScriptElement (node) => node . get_range () , Self :: SelfClosingTag (node) => node . get_range () , Self :: StartTag (node) => node . get_range () , Self :: StyleElement (node) => node . get_range () , Self :: Text (node) => node . get_range () } } } impl Doctype_Element_EndTag_Entity_ErroneousEndTag_ScriptElement_SelfClosingTag_StartTag_StyleElement_Text { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 26u16 | 28u16 | 35u16 | 11u16 | 36u16 | 29u16 | 34u16 | 31u16 | 30u16 | 16u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Doctype_Element_EndTag_Entity_ErroneousEndTag_ScriptElement_SelfClosingTag_StartTag_StyleElement_Text { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { match node . kind_id () { 26u16 => Ok (Self :: Doctype (Doctype :: try_from ((node , & mut * index)) ?)) , 28u16 => Ok (Self :: Element (Element :: try_from ((node , & mut * index)) ?)) , 35u16 => Ok (Self :: EndTag (EndTag :: try_from ((node , & mut * index)) ?)) , 11u16 => Ok (Self :: Entity (Entity :: try_from ((node , & mut * index)) ?)) , 36u16 => Ok (Self :: ErroneousEndTag (ErroneousEndTag :: try_from ((node , & mut * index)) ?)) , 29u16 => Ok (Self :: ScriptElement (ScriptElement :: try_from ((node , & mut * index)) ?)) , 34u16 => Ok (Self :: SelfClosingTag (SelfClosingTag :: try_from ((node , & mut * index)) ?)) , 31u16 => Ok (Self :: StartTag (StartTag :: try_from ((node , & mut * index)) ?)) , 30u16 => Ok (Self :: StyleElement (StyleElement :: try_from ((node , & mut * index)) ?)) , 16u16 => Ok (Self :: Text (Text :: try_from ((node , & mut * index)) ?)) , _ => Err (auto_lsp :: core :: errors :: AstError :: UnexpectedSymbol { range : node . range () , symbol : node . kind () , parent_name : stringify ! (Doctype_Element_EndTag_Entity_ErroneousEndTag_ScriptElement_SelfClosingTag_StartTag_StyleElement_Text) , }) } } } # [derive (Debug , Clone , PartialEq)] pub enum Attribute_TagName { Attribute (Attribute) , TagName (TagName) } impl auto_lsp :: core :: ast :: AstNode for Attribute_TagName { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { match self { Self :: Attribute (node) => node . get_range () , Self :: TagName (node) => node . get_range () } } } impl Attribute_TagName { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 37u16 | 17u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Attribute_TagName { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { match node . kind_id () { 37u16 => Ok (Self :: Attribute (Attribute :: try_from ((node , & mut * index)) ?)) , 17u16 => Ok (Self :: TagName (TagName :: try_from ((node , & mut * index)) ?)) , _ => Err (auto_lsp :: core :: errors :: AstError :: UnexpectedSymbol { range : node . range () , symbol : node . kind () , parent_name : stringify ! (Attribute_TagName) , }) } } } # [derive (Debug , Clone , PartialEq)] pub enum Doctype_Element_Entity_ErroneousEndTag_ScriptElement_StyleElement_Text { Doctype (Doctype) , Element (Element) , Entity (Entity) , ErroneousEndTag (ErroneousEndTag) , ScriptElement (ScriptElement) , StyleElement (StyleElement) , Text (Text) } impl auto_lsp :: core :: ast :: AstNode for Doctype_Element_Entity_ErroneousEndTag_ScriptElement_StyleElement_Text { fn get_range (& self) -> & auto_lsp :: tree_sitter :: Range { match self { Self :: Doctype (node) => node . get_range () , Self :: Element (node) => node . get_range () , Self :: Entity (node) => node . get_range () , Self :: ErroneousEndTag (node) => node . get_range () , Self :: ScriptElement (node) => node . get_range () , Self :: StyleElement (node) => node . get_range () , Self :: Text (node) => node . get_range () } } } impl Doctype_Element_Entity_ErroneousEndTag_ScriptElement_StyleElement_Text { pub fn contains (node : & auto_lsp :: tree_sitter :: Node) -> bool { matches ! (node . kind_id () , 26u16 | 28u16 | 11u16 | 36u16 | 29u16 | 30u16 | 16u16) } } impl TryFrom < (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>) > for Doctype_Element_Entity_ErroneousEndTag_ScriptElement_StyleElement_Text { type Error = auto_lsp :: core :: errors :: AstError ; fn try_from ((node , index) : (& auto_lsp :: tree_sitter :: Node < '_ > , & mut Vec < std :: sync :: Arc < dyn auto_lsp :: core :: ast :: AstNode >>)) -> Result < Self , Self :: Error > { match node . kind_id () { 26u16 => Ok (Self :: Doctype (Doctype :: try_from ((node , & mut * index)) ?)) , 28u16 => Ok (Self :: Element (Element :: try_from ((node , & mut * index)) ?)) , 11u16 => Ok (Self :: Entity (Entity :: try_from ((node , & mut * index)) ?)) , 36u16 => Ok (Self :: ErroneousEndTag (ErroneousEndTag :: try_from ((node , & mut * index)) ?)) , 29u16 => Ok (Self :: ScriptElement (ScriptElement :: try_from ((node , & mut * index)) ?)) , 30u16 => Ok (Self :: StyleElement (StyleElement :: try_from ((node , & mut * index)) ?)) , 16u16 => Ok (Self :: Text (Text :: try_from ((node , & mut * index)) ?)) , _ => Err (auto_lsp :: core :: errors :: AstError :: UnexpectedSymbol { range : node . range () , symbol : node . kind () , parent_name : stringify ! (Doctype_Element_Entity_ErroneousEndTag_ScriptElement_StyleElement_Text) , }) } } }